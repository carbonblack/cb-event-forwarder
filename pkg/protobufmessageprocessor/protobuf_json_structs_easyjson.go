// TEMPORARY AUTOGENERATED FILE: easyjson stub code to make the package
// compilable during generation.

package  protobufmessageprocessor

import (
  "github.com/mailru/easyjson/jwriter"
  "github.com/mailru/easyjson/jlexer"
)

func ( BaseEvent ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* BaseEvent ) UnmarshalJSON([]byte) error { return nil }
func ( BaseEvent ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* BaseEvent ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_BaseEvent *BaseEvent

func ( BlockedEvent ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* BlockedEvent ) UnmarshalJSON([]byte) error { return nil }
func ( BlockedEvent ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* BlockedEvent ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_BlockedEvent *BlockedEvent

func ( ChildprocEvent ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* ChildprocEvent ) UnmarshalJSON([]byte) error { return nil }
func ( ChildprocEvent ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* ChildprocEvent ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_ChildprocEvent *ChildprocEvent

func ( CrossprocEvent ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* CrossprocEvent ) UnmarshalJSON([]byte) error { return nil }
func ( CrossprocEvent ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* CrossprocEvent ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_CrossprocEvent *CrossprocEvent

func ( DigSigResult ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* DigSigResult ) UnmarshalJSON([]byte) error { return nil }
func ( DigSigResult ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* DigSigResult ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_DigSigResult *DigSigResult

func ( EmetEvent ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* EmetEvent ) UnmarshalJSON([]byte) error { return nil }
func ( EmetEvent ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* EmetEvent ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_EmetEvent *EmetEvent

func ( EventMessage ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* EventMessage ) UnmarshalJSON([]byte) error { return nil }
func ( EventMessage ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* EventMessage ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_EventMessage *EventMessage

func ( EventMessageWithHashes ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* EventMessageWithHashes ) UnmarshalJSON([]byte) error { return nil }
func ( EventMessageWithHashes ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* EventMessageWithHashes ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_EventMessageWithHashes *EventMessageWithHashes

func ( FilemodEvent ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* FilemodEvent ) UnmarshalJSON([]byte) error { return nil }
func ( FilemodEvent ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* FilemodEvent ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_FilemodEvent *FilemodEvent

func ( HeaderHashes ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* HeaderHashes ) UnmarshalJSON([]byte) error { return nil }
func ( HeaderHashes ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* HeaderHashes ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_HeaderHashes *HeaderHashes

func ( ModInfoEvent ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* ModInfoEvent ) UnmarshalJSON([]byte) error { return nil }
func ( ModInfoEvent ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* ModInfoEvent ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_ModInfoEvent *ModInfoEvent

func ( ModloadMessage ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* ModloadMessage ) UnmarshalJSON([]byte) error { return nil }
func ( ModloadMessage ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* ModloadMessage ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_ModloadMessage *ModloadMessage

func ( NetconEvent ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* NetconEvent ) UnmarshalJSON([]byte) error { return nil }
func ( NetconEvent ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* NetconEvent ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_NetconEvent *NetconEvent

func ( NetworkV2Event ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* NetworkV2Event ) UnmarshalJSON([]byte) error { return nil }
func ( NetworkV2Event ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* NetworkV2Event ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_NetworkV2Event *NetworkV2Event

func ( ParentCreateTime ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* ParentCreateTime ) UnmarshalJSON([]byte) error { return nil }
func ( ParentCreateTime ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* ParentCreateTime ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_ParentCreateTime *ParentCreateTime

func ( ProcessEvent ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* ProcessEvent ) UnmarshalJSON([]byte) error { return nil }
func ( ProcessEvent ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* ProcessEvent ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_ProcessEvent *ProcessEvent

func ( RegmodEvent ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* RegmodEvent ) UnmarshalJSON([]byte) error { return nil }
func ( RegmodEvent ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* RegmodEvent ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_RegmodEvent *RegmodEvent

func ( ScriptExEvent ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* ScriptExEvent ) UnmarshalJSON([]byte) error { return nil }
func ( ScriptExEvent ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* ScriptExEvent ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_ScriptExEvent *ScriptExEvent

func ( TamperAlert ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* TamperAlert ) UnmarshalJSON([]byte) error { return nil }
func ( TamperAlert ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* TamperAlert ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_TamperAlert *TamperAlert

func ( UnixTimeStamp ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* UnixTimeStamp ) UnmarshalJSON([]byte) error { return nil }
func ( UnixTimeStamp ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* UnixTimeStamp ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_UnixTimeStamp *UnixTimeStamp
